#!/bin/bash

# -------- CONFIGURACI√ìN --------
PROJECT_ID=$(gcloud config get-value project)

# -------- FUNCIONES --------

function borrar_servicio_cloudrun() {
    echo "üîç Listando servicios disponibles en Cloud Run:"
    SERVICES=$(gcloud run services list --platform=managed --format="value(metadata.name)")

    if [[ -z "$SERVICES" ]]; then
        echo "‚ùå No hay servicios de Cloud Run en este proyecto."
        return
    fi

    echo "‚úÖ Servicios encontrados:"
    select SERVICE in $SERVICES; do
        if [[ -n "$SERVICE" ]]; then
            REGION=$(gcloud run services describe "$SERVICE" --platform=managed --format="value(metadata.annotations['run.googleapis.com/region'])")
            if [[ -z "$REGION" ]]; then
                echo "‚ùå No se pudo detectar la regi√≥n del servicio $SERVICE. Abortando."
                exit 1
            fi
            echo "üìç Regi√≥n detectada: $REGION"
            echo "üóë Eliminando servicio: $SERVICE"
            gcloud run services delete "$SERVICE" --platform=managed --region="$REGION" --quiet
            break
        else
            echo "‚ö† Opci√≥n inv√°lida. Intenta de nuevo."
        fi
    done
}

function borrar_imagen_container_registry() {
    echo ""
    echo "üñº Listando im√°genes en Container Registry (gcr.io):"
    IMAGES=$(gcloud container images list --repository=gcr.io/$PROJECT_ID --format="value(NAME)")

    if [[ -z "$IMAGES" ]]; then
        echo "‚ùå No se encontraron im√°genes en Container Registry."
        return
    fi

    echo "‚úÖ Im√°genes encontradas:"
    select IMAGE in $IMAGES; do
        if [[ -n "$IMAGE" ]]; then
            echo "üóë Eliminando imagen: $IMAGE"
            gcloud container images delete "$IMAGE" --quiet --force-delete-tags
            break
        else
            echo "‚ö† Opci√≥n inv√°lida. Intenta de nuevo."
        fi
    done
}

function borrar_imagen_artifact_registry() {
    echo ""
    echo "üñº Listando repositorios de Artifact Registry:"
    REPOS=$(gcloud artifacts repositories list --project=$PROJECT_ID --format="value(name)")

    if [[ -z "$REPOS" ]]; then
        echo "‚ùå No se encontraron repositorios en Artifact Registry."
        return
    fi

    echo "‚úÖ Repositorios encontrados:"
    select REPO in $REPOS; do
        if [[ -n "$REPO" ]]; then
            echo "üîç Listando im√°genes en el repositorio: $REPO"
            IMAGES=$(gcloud artifacts docker images list "$REPO" --format="value(IMAGE)")

            if [[ -z "$IMAGES" ]]; then
                echo "‚ùå No se encontraron im√°genes en el repositorio $REPO."
                return
            fi

            echo "‚úÖ Im√°genes encontradas:"
            select IMAGE in $IMAGES; do
                if [[ -n "$IMAGE" ]]; then
                    echo "üóë Eliminando imagen: $IMAGE"
                    gcloud artifacts docker images delete "$IMAGE" --quiet --delete-tags
                    break 2
                else
                    echo "‚ö† Opci√≥n inv√°lida. Intenta de nuevo."
                fi
            done
        else
            echo "‚ö† Opci√≥n inv√°lida. Intenta de nuevo."
        fi
    done
}

# -------- EJECUCI√ìN --------

borrar_servicio_cloudrun
borrar_imagen_container_registry
borrar_imagen_artifact_registry

# -------- ELIMINAR SCRIPT DESCARGADO --------
echo ""
if [[ -f "script-v2ray.sh" ]]; then
    echo "üßπ Eliminando script script-v2ray.sh..."
    rm script-v2ray.sh
else
    echo "‚Ñπ No se encontr√≥ script-v2ray.sh para eliminar."
fi

echo ""
echo "‚úÖ Limpieza completada."
